#include "/Engine/Public/Platform.ush"
#include "MarchingTetrahedraComputeShader.ush"	// Constants and data structs are contained in this file

// Triangulate an isosurface using the marching tetrahedra method

// Output
RWBuffer<float3> outputVertexTriplets;
RWBuffer<uint> vertexTripletIndex;

// Input
Buffer<float> dataGridValues;
uint3 gridPointCount;
float3 gridSizePerCube;
float3 zeroNodeOffset;

float isovalue;

bool IsValidIndex(uint x, uint y, uint z)
{
	if (x >= gridPointCount.x)
		return false;
	if (y >= gridPointCount.y)
		return false;
	if (z >= gridPointCount.z)
		return false;
	
	return true;
}

bool IsValidIndex(uint3 coord)
{
	return IsValidIndex(coord.x, coord.y, coord.z);
}

// Convert 3D coordinates into the single array index using little-endian notation
uint GetArrayIndex(uint x, uint y, uint z)
{
	if (x >= gridPointCount.x || y >= gridPointCount.y || z >= gridPointCount.z)
	{
		return -1;
	}

	uint xComponent = x;
	uint yComponent = y * gridPointCount.x;
	uint zComponent = z * gridPointCount.x * gridPointCount.y;
	return zComponent + yComponent + xComponent;
}

uint GetArrayIndex(uint3 coord)
{
	return GetArrayIndex(coord.x, coord.y, coord.z);
}

// There seems to be some weird operation where the index of the RWBuffer<float3> only increments by float1 and each must be set separately
void SetOutputVertex(uint arrayIndex, float3 value)
{
    outputVertexTriplets[3 * arrayIndex] = value.x;
    outputVertexTriplets[3 * arrayIndex + 1] = value.y;
    outputVertexTriplets[3 * arrayIndex + 2] = value.z;
}

[numthreads(THREADS_X, THREADS_Y, THREADS_Z)]
void MarchingTetrahedraComputeShader(
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint GroupIndex : SV_GroupIndex )
{
    uint3 gridCellToBeTriangulated = DispatchThreadId;
    if (!IsValidIndex(gridCellToBeTriangulated))
	{
		return;
	}
	
    uint arrayIndex = GetArrayIndex(gridCellToBeTriangulated);
	
    int val0 = dataGridValues[arrayIndex];
    SetOutputVertex(arrayIndex, gridCellToBeTriangulated);
	InterlockedAdd(vertexTripletIndex[0], 1);
}