#include "/Engine/Public/Platform.ush"

// Calculate Ï€ using the monte carlo method
// https://en.wikipedia.org/wiki/Monte_Carlo_method

// Output has 1 element: [numInCircle]
RWBuffer<int> Output;

// Seed the random number generator
float Seed = 0.0f;
uint3 gridPointCount;
float3 gridSizePerCube;
float3 zeroNodeOffset;

float isovalue;

[numthreads(THREADS_X, THREADS_Y, THREADS_Z)]
void MarchingTetrahedraComputeShader(
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint GroupIndex : SV_GroupIndex )
{	
    //if (DispatchThreadId.x >= gridPointCount.x)        return;
    //if (DispatchThreadId.y >= gridPointCount.y)        return;
    //if (DispatchThreadId.z >= gridPointCount.z)        return;
	
    InterlockedAdd(Output[0], 1);
}