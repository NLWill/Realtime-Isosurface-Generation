#include "/Engine/Public/Platform.ush"
#include "MarchingTetrahedraComputeShader.ush"

// Calculate Ï€ using the monte carlo method
// https://en.wikipedia.org/wiki/Monte_Carlo_method

// Output has 1 element: [numInCircle]
RWBuffer<float3> outputVertexTriplets;
RWBuffer<uint> vertexTripletIndex;

// Seed the random number generator
Buffer<float> dataGridValues;
uint3 gridPointCount;
float3 gridSizePerCube;
float3 zeroNodeOffset;

float isovalue;

[numthreads(THREADS_X, THREADS_Y, THREADS_Z)]
void MarchingTetrahedraComputeShader(
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint GroupIndex : SV_GroupIndex )
{	
    if (DispatchThreadId.x >= gridPointCount.x)        
        return;
    if (DispatchThreadId.y >= gridPointCount.y)        
        return;
    if (DispatchThreadId.z >= gridPointCount.z)       
        return;
	
    InterlockedAdd(vertexTripletIndex[0], 1);
}